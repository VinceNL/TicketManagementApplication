// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250102210638_SeedChange")]
    partial class SeedChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ServerFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("TicketId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Application Bug"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Network Issue"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Feature Request"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiscussionId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Domain.Entities.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"));

                    b.Property<int>("ExpectedDays")
                        .HasColumnType("int");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            ExpectedDays = 10,
                            PriorityName = "Low"
                        },
                        new
                        {
                            PriorityId = 2,
                            ExpectedDays = 5,
                            PriorityName = "Medium"
                        },
                        new
                        {
                            PriorityId = 3,
                            ExpectedDays = 2,
                            PriorityName = "High"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductName = "Product 1"
                        },
                        new
                        {
                            ProductId = 2,
                            ProductName = "Product 2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ClosedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RaisedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RaisedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RaisedBy");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 1",
                            ExpectedDate = new DateTime(2024, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 1"
                        },
                        new
                        {
                            TicketId = 2,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 2",
                            ExpectedDate = new DateTime(2024, 9, 3, 8, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 2"
                        },
                        new
                        {
                            TicketId = 3,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 3",
                            ExpectedDate = new DateTime(2024, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 3"
                        },
                        new
                        {
                            TicketId = 4,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 4",
                            ExpectedDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 4"
                        },
                        new
                        {
                            TicketId = 5,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 5",
                            ExpectedDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 5"
                        },
                        new
                        {
                            TicketId = 6,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 6",
                            ExpectedDate = new DateTime(2024, 9, 13, 8, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 6"
                        },
                        new
                        {
                            TicketId = 7,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 7",
                            ExpectedDate = new DateTime(2024, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 7"
                        },
                        new
                        {
                            TicketId = 8,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 8",
                            ExpectedDate = new DateTime(2024, 9, 11, 8, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 8"
                        },
                        new
                        {
                            TicketId = 9,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 9",
                            ExpectedDate = new DateTime(2024, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 9"
                        },
                        new
                        {
                            TicketId = 10,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 10",
                            ExpectedDate = new DateTime(2024, 9, 17, 8, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 10"
                        },
                        new
                        {
                            TicketId = 11,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 11",
                            ExpectedDate = new DateTime(2024, 9, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 11"
                        },
                        new
                        {
                            TicketId = 12,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 12",
                            ExpectedDate = new DateTime(2024, 9, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 12"
                        },
                        new
                        {
                            TicketId = 13,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 13",
                            ExpectedDate = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 13"
                        },
                        new
                        {
                            TicketId = 14,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 14",
                            ExpectedDate = new DateTime(2024, 9, 14, 8, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 14"
                        },
                        new
                        {
                            TicketId = 15,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 15",
                            ExpectedDate = new DateTime(2024, 9, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 15"
                        },
                        new
                        {
                            TicketId = 16,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 16",
                            ExpectedDate = new DateTime(2024, 9, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 16"
                        },
                        new
                        {
                            TicketId = 17,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 17",
                            ExpectedDate = new DateTime(2024, 9, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 17"
                        },
                        new
                        {
                            TicketId = 18,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 18",
                            ExpectedDate = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 18"
                        },
                        new
                        {
                            TicketId = 19,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 19",
                            ExpectedDate = new DateTime(2024, 9, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 19"
                        },
                        new
                        {
                            TicketId = 20,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 20",
                            ExpectedDate = new DateTime(2024, 9, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 20"
                        },
                        new
                        {
                            TicketId = 21,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 21",
                            ExpectedDate = new DateTime(2024, 9, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 21"
                        },
                        new
                        {
                            TicketId = 22,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 22",
                            ExpectedDate = new DateTime(2024, 9, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 22"
                        },
                        new
                        {
                            TicketId = 23,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 23",
                            ExpectedDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 23"
                        },
                        new
                        {
                            TicketId = 24,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 24",
                            ExpectedDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 24"
                        },
                        new
                        {
                            TicketId = 25,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 25",
                            ExpectedDate = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 25"
                        },
                        new
                        {
                            TicketId = 26,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 26",
                            ExpectedDate = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 26"
                        },
                        new
                        {
                            TicketId = 27,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 27",
                            ExpectedDate = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 27"
                        },
                        new
                        {
                            TicketId = 28,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 28",
                            ExpectedDate = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 28"
                        },
                        new
                        {
                            TicketId = 29,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 29",
                            ExpectedDate = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 29"
                        },
                        new
                        {
                            TicketId = 30,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 30",
                            ExpectedDate = new DateTime(2024, 10, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 30"
                        },
                        new
                        {
                            TicketId = 31,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 31",
                            ExpectedDate = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 31"
                        },
                        new
                        {
                            TicketId = 32,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 32",
                            ExpectedDate = new DateTime(2024, 10, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 32"
                        },
                        new
                        {
                            TicketId = 33,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 33",
                            ExpectedDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 33"
                        },
                        new
                        {
                            TicketId = 34,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 34",
                            ExpectedDate = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 34"
                        },
                        new
                        {
                            TicketId = 35,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 35",
                            ExpectedDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 35"
                        },
                        new
                        {
                            TicketId = 36,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 36",
                            ExpectedDate = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 36"
                        },
                        new
                        {
                            TicketId = 37,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 37",
                            ExpectedDate = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 37"
                        },
                        new
                        {
                            TicketId = 38,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 38",
                            ExpectedDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 38"
                        },
                        new
                        {
                            TicketId = 39,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 39",
                            ExpectedDate = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 39"
                        },
                        new
                        {
                            TicketId = 40,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 40",
                            ExpectedDate = new DateTime(2024, 10, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 40"
                        },
                        new
                        {
                            TicketId = 41,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 41",
                            ExpectedDate = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 41"
                        },
                        new
                        {
                            TicketId = 42,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 42",
                            ExpectedDate = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 42"
                        },
                        new
                        {
                            TicketId = 43,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 43",
                            ExpectedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 43"
                        },
                        new
                        {
                            TicketId = 44,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 44",
                            ExpectedDate = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 44"
                        },
                        new
                        {
                            TicketId = 45,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 45",
                            ExpectedDate = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 45"
                        },
                        new
                        {
                            TicketId = 46,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 46",
                            ExpectedDate = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 46"
                        },
                        new
                        {
                            TicketId = 47,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 47",
                            ExpectedDate = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 47"
                        },
                        new
                        {
                            TicketId = 48,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 48",
                            ExpectedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 48"
                        },
                        new
                        {
                            TicketId = 49,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 49",
                            ExpectedDate = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 49"
                        },
                        new
                        {
                            TicketId = 50,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 50",
                            ExpectedDate = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 50"
                        },
                        new
                        {
                            TicketId = 51,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 51",
                            ExpectedDate = new DateTime(2024, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 51"
                        },
                        new
                        {
                            TicketId = 52,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 52",
                            ExpectedDate = new DateTime(2024, 10, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 52"
                        },
                        new
                        {
                            TicketId = 53,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 53",
                            ExpectedDate = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 53"
                        },
                        new
                        {
                            TicketId = 54,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 54",
                            ExpectedDate = new DateTime(2024, 10, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 54"
                        },
                        new
                        {
                            TicketId = 55,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 55",
                            ExpectedDate = new DateTime(2024, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 55"
                        },
                        new
                        {
                            TicketId = 56,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 56",
                            ExpectedDate = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 56"
                        },
                        new
                        {
                            TicketId = 57,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 57",
                            ExpectedDate = new DateTime(2024, 10, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 57"
                        },
                        new
                        {
                            TicketId = 58,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 58",
                            ExpectedDate = new DateTime(2024, 10, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 58"
                        },
                        new
                        {
                            TicketId = 59,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 59",
                            ExpectedDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 59"
                        },
                        new
                        {
                            TicketId = 60,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            ClosedBy = "user1",
                            ClosedDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Description for ticket 60",
                            ExpectedDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "CLOSED",
                            Summary = "Sample ticket 60"
                        },
                        new
                        {
                            TicketId = 61,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 61",
                            ExpectedDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 61"
                        },
                        new
                        {
                            TicketId = 62,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 62",
                            ExpectedDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 62"
                        },
                        new
                        {
                            TicketId = 63,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 63",
                            ExpectedDate = new DateTime(2024, 2, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 63"
                        },
                        new
                        {
                            TicketId = 64,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 64",
                            ExpectedDate = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 64"
                        },
                        new
                        {
                            TicketId = 65,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 65",
                            ExpectedDate = new DateTime(2024, 4, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 65"
                        },
                        new
                        {
                            TicketId = 66,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 66",
                            ExpectedDate = new DateTime(2024, 5, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 66"
                        },
                        new
                        {
                            TicketId = 67,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 67",
                            ExpectedDate = new DateTime(2024, 7, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 67"
                        },
                        new
                        {
                            TicketId = 68,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 68",
                            ExpectedDate = new DateTime(2024, 7, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 68"
                        },
                        new
                        {
                            TicketId = 69,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 69",
                            ExpectedDate = new DateTime(2024, 8, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 69"
                        },
                        new
                        {
                            TicketId = 70,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 70",
                            ExpectedDate = new DateTime(2024, 9, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 70"
                        },
                        new
                        {
                            TicketId = 71,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 71",
                            ExpectedDate = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 71"
                        },
                        new
                        {
                            TicketId = 72,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 72",
                            ExpectedDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 72"
                        },
                        new
                        {
                            TicketId = 73,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 2,
                            Description = "Description for ticket 73",
                            ExpectedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 73"
                        },
                        new
                        {
                            TicketId = 74,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 3,
                            Description = "Description for ticket 74",
                            ExpectedDate = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "OPEN",
                            Summary = "Sample ticket 74"
                        },
                        new
                        {
                            TicketId = 75,
                            AssignedToId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            CategoryId = 1,
                            Description = "Description for ticket 75",
                            ExpectedDate = new DateTime(2025, 2, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            PriorityId = 3,
                            ProductId = 1,
                            RaisedBy = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RaisedDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = "NEW",
                            Summary = "Sample ticket 75"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            AccessFailedCount = 0,
                            AccountConfirmed = true,
                            ConcurrencyStamp = "6e299689-dcb0-4af9-baf5-960240b485cb",
                            Email = "test@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@GMAIL.COM",
                            NormalizedUserName = "TEST@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9E8c3UkmIIfPnbRTFksYi816wZdYvU33eU5AawnEsnog6/CbMQE/QS25HxZm6oGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "870fd7ce-cf2e-4b7f-b24b-3e2e66b2cbff",
                            TwoFactorEnabled = false,
                            UserName = "test@gmail.com",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d3b07384-d9a0-4c8b-8b0d-2f3b8b6e0a1e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a3fa6a5d-ff0d-4ea6-a2b5-f9ce7e77b36c",
                            RoleId = "d3b07384-d9a0-4c8b-8b0d-2f3b8b6e0a1e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Domain.Entities.Discussion", "Discussion")
                        .WithMany("Attachments")
                        .HasForeignKey("DiscussionId");

                    b.HasOne("Domain.Entities.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId");

                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("RaisedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssignedTo");

                    b.Navigation("Category");

                    b.Navigation("Priority");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
