@page "/ticket/details/{TicketId:int}"
@using Infrastructure.Common
@using Microsoft.AspNetCore.Authorization
@using UI.Extensions.Helpers

@attribute [Authorize]

@inject ITicketService TicketService
@inject ICriteriaService CriteriaService
@inject IAccountService AccountService
@inject NavigationManager Nav

@rendermode InteractiveServer

<MudPopoverProvider />
<style>
    .head-panel {
        background-color: var(--light-green);
        padding: 10px;
        margin-top: -1.1rem;
    }

    .discussion-panel {
        height: 85vh;
        overflow-y: scroll;
    }

    .ticket-info {
        padding: 20px;
    }

    .action-panel {
        border-left: 1px solid var(--dark);
    }
</style>

<div class="head-panel">
    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" @onclick="BackToTicketList" Variant="Variant.Filled" Color="Color.Primary">
        <MudText>Back to list</MudText>
    </MudButton>
    <MudButton Disabled="isClosed" StartIcon="@Icons.Material.Filled.CheckCircle" @onclick="CloseTicket" Variant="Variant.Filled" Color="Color.Error">
        <MudText>Close</MudText>
    </MudButton>
</div>

<SectionContent SectionName="page-title">Ticket ID: @Ticket.TicketIdView</SectionContent>
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-10 mt-3 p-3 discussion-panel">
            <div class="ticket-info">
                <p style="font-size:25px">@Ticket.Summary</p>

                <table class="mt-2">
                    <tr>
                        <td rowspan="2">
                            <MudImage Src="uploads/avatar/avatar.png"
                                      Width="50" Height="50" Style="border-radius:5px" />
                        </td>
                        <td>
                            <span class="ms-3">
                                <strong>@Ticket.RaisedByName</strong>
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>

                            <span class="ms-3">
                                @Ticket.CreatedDate.BeautifyDate()
                            </span>
                        </td>
                    </tr>
                </table>

                <div class="mt-4">
                    @((MarkupString)Ticket.Description)
                </div>

                @if (Ticket.Attachments.Count > 0)
                {
                    <div class="attachment mt-5">
                        <div>
                            <strong>Attachments</strong>
                        </div>
                        <div class="mt-2">
                            <MudGrid>
                                @foreach (var item in Ticket.Attachments)
                                {
                                    <MudItem>
                                        <MudButton Download="@item.FileName"
                                                   Href="@item.ServerFileName"
                                                   Variant="Variant.Outlined"
                                                   StartIcon="@Icons.Material.Filled.CloudDownload"
                                                   Color="Color.Primary">
                                            @item.FileName
                                        </MudButton>
                                    </MudItem>
                                }
                            </MudGrid>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-sm-2 action-panel">
            <MudStack Style="width: 100%" class="mt-5">
                <Alert @ref="alert"></Alert>
                @if (errors.Length > 0)
                {
                    <MudItem>
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">@($"Error found ({errors.Length})")</MudText>

                            @foreach (var error in errors)
                            {
                                <MudText Color="@Color.Error">@error</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                }
                <MudButton Variant="Variant.Filled"
                           FullWidth="true"
                           EndIcon="@Icons.Material.Filled.Save"
                           Color="Color.Primary"
                           @onclick="Update">
                    Update Ticket
                </MudButton>
                <MudTextField T="string" ReadOnly="true" Text="@Ticket.ExpectedDate.BeautifyDate()" Label="Expected Completion Date" Variant="Variant.Outlined"></MudTextField>

                @if (isClosed)
                {
                    <MudTextField T="string" ReadOnly="true" Text="@Ticket.ClosedBy" Label="Closed By" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField T="string" ReadOnly="true" Text="@Ticket.ClosedDate.BeautifyDate()" Label="Closed Date" Variant="Variant.Outlined"></MudTextField>
                }

                <Select @ref="productDDL" elements="products" label="Product"></Select>
                <Select @ref="categoryDDL" elements="categories" label="Category"></Select>
                <Select @ref="assignDDL" elements="users" label="Assign"></Select>
                <Select @ref="priorityDDL" elements="priorities" label="Priority"></Select>
                <Select @ref="statusDDL" elements="status" label="Status"></Select>
            </MudStack>
        </div>
    </div>
</div>

@code {
    [Parameter] public int TicketId { get; set; }

    private Select productDDL = new();
    private Select categoryDDL = new();
    private Select assignDDL = new();
    private Select priorityDDL = new();
    private Select statusDDL = new();

    private GetTicketResponse Ticket = new();
    private List<SelectItem> products = new();
    private List<SelectItem> priorities = new();
    private List<SelectItem> categories = new();
    private List<SelectItem> status = new();
    private List<SelectItem> users = new();

    private bool isClosed = false;
    private Alert alert = new();
    private string?[] errors = [];

    protected override Task OnInitializedAsync()
    {
        Ticket = TicketService.FindTicket(TicketId);
        InitializeDropdowns();
        return Task.CompletedTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AssignTicketValues();
        }
    }

    private void InitializeDropdowns()
    {
        products = CriteriaService.GetProducts()
                    .Select(x => new SelectItem { Value = x.ProductId.ToString(), Text = x.ProductName })
                    .ToList();

        priorities = CriteriaService.GetPriorities()
                    .Select(x => new SelectItem { Value = x.PriorityId.ToString(), Text = x.PriorityName })
                    .ToList();

        categories = CriteriaService.GetCategories()
                    .Select(x => new SelectItem { Value = x.CategoryId.ToString(), Text = x.CategoryName })
                    .ToList();

        status = CriteriaService.GetStatus()
                    .Select(x => new SelectItem { Value = x, Text = x })
                    .ToList();

        users = AccountService.GetUsers()
                    .Select(x => new SelectItem { Value = x.Id, Text = x.Email })
                    .ToList();
    }

    private void AssignTicketValues()
    {
        productDDL.selectedValue = Ticket.ProductId.ToString();
        categoryDDL.selectedValue = Ticket.CategoryId.ToString();
        priorityDDL.selectedValue = Ticket.PriorityId.ToString();
        statusDDL.selectedValue = Ticket.Status;

        if (Ticket.ExpectedDate < DateTime.Now && Ticket.Status != Constants.STATUS_CLOSED)
        {
            alert.ShowFailure("This ticket is overdue!");
        }

        if (Ticket.AssignedToId != null)
        {
            assignDDL.selectedValue = Ticket.AssignedToId;
        }

        if (Ticket.Status == Constants.STATUS_CLOSED)
        {
            isClosed = true;
        }

        StateHasChanged();
    }

    private void BackToTicketList()
    {
        Nav.NavigateTo("/ticket");
    }

    private async Task Update()
    {
        var request = new UpdateTicketRequest
            {
                TicketId = Ticket.TicketId,
                ProductId = productDDL.selectedValue?.ToNullableInteger(),
                CategoryId = categoryDDL.selectedValue?.ToNullableInteger(),
                AssignedToId = assignDDL.selectedValue,
                PriorityId = priorityDDL.selectedValue?.ToNullableInteger(),
                Status = statusDDL.selectedValue ?? string.Empty
            };

        var validationHelper = new ValidationHelpers(request);
        bool isValid = validationHelper.Validate();

        errors = validationHelper.validationResults.Select(x => x.ErrorMessage).ToArray();

        if (isValid)
        {
            var result = await TicketService.UpdateTicket(request);
            if (result.IsSuccess)
            {
                alert.ShowSucces("Ticket updated successfully!");
                Ticket = TicketService.FindTicket(TicketId);
                AssignTicketValues();
            }
            else
            {
                alert.ShowFailure("Failed: " + result.ErrorMessage);
            }
        }
    }

    private async Task CloseTicket()
    {
        statusDDL.selectedValue = Constants.STATUS_CLOSED;
        await Update();
    }
}

