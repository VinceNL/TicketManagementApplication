@page "/ticket/create"
@using Microsoft.AspNetCore.Authorization
@using MudExRichTextEditor
@using UI.Extensions.Helpers

@attribute [Authorize]

@inject NavigationManager Nav
@inject ICriteriaService CriteriaService;
@inject IAccountService AccountService;
@inject ITicketService TicketService;

@rendermode InteractiveServer

<SectionContent SectionName="page-title">Create a New Ticket</SectionContent>

<style>
    .head-panel {
        background-color: var(--light-green);
        padding: 10px;
        margin-top: -1.1rem;
    }

    .discussion-panel {
        height: 85vh;
        overflow-y: scroll;
    }

    .ticket-info {
        padding: 10px;
    }

    .action-panel {
        border-left: 1px solid var(--dark);
    }
</style>
<div class="head-panel">
    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" @onclick="BackToTicketList" Variant="Variant.Filled" Color="Color.Primary">
        <MudText>Back to list</MudText>
    </MudButton>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-10 mt-2 discussion-panel">
            <div class="ticket-info">
                <div>
                    <MudTextField T="string" @ref="summary" Label="Summary" Variant="Variant.Text"></MudTextField>
                </div>
                <MudExRichTextEdit @ref="@descriptionEditor"
                                   Height="444"
                                   Class="mt-3"
                                   Required="true" RequiredError="Ticket Description is required!"
                                   Placeholder="Description">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                </MudExRichTextEdit>

                <div class="mt-3">
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Attachments
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    @if (Files.Count > 0)
                    {
                        <MudText Typo="@Typo.h6">@Files.Count() File@(Files.Count() == 1 ? "" : "s"):</MudText>
                        <MudList T="string">
                            @foreach (var file in Files)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </div>

            </div>
        </div>
        <div class="col-sm-2 action-panel">
            <MudStack Style="width: 100%" class="mt-5">
                <Alert @ref="alert"></Alert>
                @if (errors.Length > 0)
                {
                    <MudItem>
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">@($"Error found ({errors.Length})")</MudText>

                            @foreach (var error in errors)
                            {
                                <MudText Color="@Color.Error">@error</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                }
                <MudButton @onclick="CreateTicket" Variant="Variant.Filled"
                FullWidth="true"
                EndIcon="@Icons.Material.Filled.Save"
                Color="Color.Primary">
                    Create Ticket
                </MudButton>
                <Select @ref="productDDL" elements="products" label="Product"></Select>
                <Select @ref="categoryDDL" elements="categories" label="Category"></Select>
                <Select @ref="assignDDL" elements="users" label="Assign to"></Select>
                <Select @ref="priorityDDL" elements="priorities" label="Priority"></Select>
            </MudStack>
        </div>
    </div>
</div>

@code {
    private Alert alert = new();
    private string?[] errors = { };

    private MudTextField<string> summary = new();
    private MudExRichTextEdit descriptionEditor = new();

    private Select productDDL = new();
    private Select categoryDDL = new();
    private Select assignDDL = new();
    private Select priorityDDL = new();

    private List<SelectItem> products = new();
    private List<SelectItem> priorities = new();
    private List<SelectItem> categories = new();
    private List<SelectItem> users = new();

    private IList<IBrowserFile> Files = new List<IBrowserFile>();

    protected override Task OnInitializedAsync()
    {
        InitializeDropdowns();
        return Task.CompletedTask;
    }

    private void InitializeDropdowns()
    {
        products = CriteriaService.GetProducts()
                    .Select(x => new SelectItem { Value = x.ProductId.ToString(), Text = x.ProductName })
                    .ToList();

        priorities = CriteriaService.GetPriorities()
                    .Select(x => new SelectItem { Value = x.PriorityId.ToString(), Text = x.PriorityName })
                    .ToList();

        categories = CriteriaService.GetCategories()
                    .Select(x => new SelectItem { Value = x.CategoryId.ToString(), Text = x.CategoryName })
                    .ToList();

        users = AccountService.GetUsers()
                    .Select(x => new SelectItem { Value = x.Id, Text = x.Email })
                    .ToList();

        StateHasChanged();
    }

    private void BackToTicketList()
    {
        Nav.NavigateTo("/ticket");
    }

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            Files.Add(file);
        }
    }

    private async Task CreateTicket()
    {
        var request = new CreateTicketRequest 
        {
            Summary = summary.Text ?? string.Empty,
            Description = descriptionEditor.Value,
            ProductId = productDDL.selectedValue?.ToNullableInteger(),
            CategoryId = categoryDDL.selectedValue?.ToNullableInteger(),
            AssignedToId = assignDDL.selectedValue,
            PriorityId = priorityDDL.selectedValue?.ToNullableInteger(),
            Files = Files
        };

        var validationHelper = new ValidationHelpers(request);
        bool isValid = validationHelper.Validate();
        errors = validationHelper.validationResults.Select(x => x.ErrorMessage).ToArray();

        if (isValid) 
        {
            var createTicketResult = await TicketService.CreateTicket(request);
            if (!createTicketResult.IsSuccess)
            {
                alert.ShowFailure("Failed: " + createTicketResult.ErrorMessage);
            }
            else 
            {
                Nav.NavigateTo("/ticket/details/" + createTicketResult.Value);
            }
        }
    }
}
