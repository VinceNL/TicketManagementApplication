@page "/ticket"
@layout MainLayout

@rendermode InteractiveServer
@inject ITicketService TicketService
@inject ICriteriaService CriteriaService
@inject IAccountService AccountService
@inject NavigationManager Nav

<style>
    .filter-panel {
        padding: 0 20px;
        position: relative;
        background-color: var(--light-green);
        width: 100%;
    }

    .mud-input.mud-input-outlined {
        background-color: white !important;
    }

    .mud-elevation-1 {
        box-shadow: none !important;
    }

    .mud-table-row {
        cursor: pointer !important;
    }

    .mud-grid-item {
        padding-top: .3rem !important;
        padding-bottom: .3rem !important;
    }
</style>

<MudPopoverProvider />

<SectionContent SectionName="page-title">Ticket Management</SectionContent>

<div class="filter-panel">
    <MudGrid>
        <MudItem>
            <MudTextField @bind-Value="Summary"
                          Class="pt-2"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Dark" />
        </MudItem>
        <MudItem>
            <MultiSelect Label="Product" Elements="products" @ref="productSelect">
            </MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect Label="Priority" Elements="priorities" @ref="prioritySelect">
            </MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect Label="Category" Elements="categories" @ref="categorySelect">
            </MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect Label="Status" Elements="status" @ref="statusSelect">
            </MultiSelect>
        </MudItem>
        <MudItem>
            <MultiSelect Label="Raised By" Elements="raisedBy" @ref="raisedBySelect">
            </MultiSelect>
        </MudItem>
        <MudItem class="d-flex align-center flex-grow-1 gap-3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => dataGrid.ReloadServerData()">
                <MudText>Search</MudText>
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Dark" @onclick="Reset">
                <MudText>Reset</MudText>
            </MudButton>
        </MudItem>
    </MudGrid>
</div>

<MudDataGrid @ref="dataGrid"
             T="GetTicketResponse"
             SortMode="@SortMode.Single"
             ServerData="ServerReload"
             Hover="true"
             RowClick="OnRowClick">

    <Columns>
        <PropertyColumn Property="x => x.TicketIdView" Title="Ticket ID" />
        <PropertyColumn Property="x => x.Summary" Sortable="false" />
        <PropertyColumn Property="x => x.Product" Sortable="false" />
        <PropertyColumn Property="x => x.Category" Sortable="false" />
        <PropertyColumn Property="x => x.Priority" Sortable="false" />
        <PropertyColumn Property="x => x.Status" Sortable="false" />
        <PropertyColumn Property="x => x.RaisedBy" Title="Raised By" />
        <PropertyColumn Property="x => x.ExpectedDate" Title="Expected Date" Format="dd MMM yyyy" />
        <PropertyColumn Property="x => x.CreatedDate" Title="Created Date" Format="dd MMM yyyy" />


    </Columns>
    <PagerContent>
        <MudDataGridPager T="GetTicketResponse" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<GetTicketResponse> dataGrid;
    MultiSelect productSelect;
    MultiSelect prioritySelect;
    MultiSelect categorySelect;
    MultiSelect statusSelect;
    MultiSelect raisedBySelect;

    public string Summary { get; set; } = string.Empty;

    private List<SelectItem> products;
    private List<SelectItem> priorities;
    private List<SelectItem> categories;
    private List<SelectItem> status;
    private List<SelectItem> raisedBy;

    protected override Task OnInitializedAsync()
    {
        InitializeMultiSelect();
        return Task.CompletedTask;
    }

    private void InitializeMultiSelect()
    {
        products = CriteriaService.GetProducts()
                    .Select(x => new SelectItem { Value = x.ProductId.ToString(), Text = x.ProductName })
                    .ToList();

        priorities = CriteriaService.GetPriorities()
                    .Select(x => new SelectItem { Value = x.PriorityId.ToString(), Text = x.PriorityName })
                    .ToList();

        categories = CriteriaService.GetCategories()
                    .Select(x => new SelectItem { Value = x.CategoryId.ToString(), Text = x.CategoryName })
                    .ToList();

        status = CriteriaService.GetStatus()
                    .Select(x => new SelectItem { Value = x, Text = x })
                    .ToList();

        raisedBy = AccountService.GetUsers()
                    .Select(x => new SelectItem { Value = x.Id, Text = x.Email })
                    .ToList();
    }

    private async Task<GridData<GetTicketResponse>> ServerReload(GridState<GetTicketResponse> state)
    {
        IEnumerable<GetTicketResponse> data = TicketService.GetTickets(new GetTicketsRequest()
            {
                summary = Summary,
                CategoryId = categorySelect.options.Select(x => int.Parse(x)).ToArray(),
                ProductId = productSelect.options.Select(x => int.Parse(x)).ToArray(),
                PriorityId = prioritySelect.options.Select(x => int.Parse(x)).ToArray(),
                RaisedBy = raisedBySelect.options.ToArray(),
                Status = statusSelect.options.ToArray(),
            });

        await Task.Delay(300);

        var totalItems = data.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            var sortMappings = new Dictionary<string, Func<IEnumerable<GetTicketResponse>, bool, IOrderedEnumerable<GetTicketResponse>>>
            {
                { nameof(GetTicketResponse.TicketIdView), (data, descending) => data.OrderByDirection(descending ? SortDirection.Descending : SortDirection.Ascending, o => o.TicketIdView) },
                { nameof(GetTicketResponse.RaisedBy), (data, descending) => data.OrderByDirection(descending ? SortDirection.Descending : SortDirection.Ascending, o => o.RaisedBy) },
                { nameof(GetTicketResponse.ExpectedDate), (data, descending) => data.OrderByDirection(descending ? SortDirection.Descending : SortDirection.Ascending, o => o.ExpectedDate) },
                { nameof(GetTicketResponse.CreatedDate), (data, descending) => data.OrderByDirection(descending ? SortDirection.Descending : SortDirection.Ascending, o => o.CreatedDate) }
            };

            if (sortMappings.TryGetValue(sortDefinition.SortBy, out var sortFunction))
            {
                data = sortFunction(data, sortDefinition.Descending);
            }
        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new GridData<GetTicketResponse>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private void OnRowClick(DataGridRowClickEventArgs<GetTicketResponse> args)
    {
        Nav.NavigateTo($"/ticket/details/{args.Item.TicketId}");
    }

    private Task Reset()
    {
        productSelect.Clear();
        prioritySelect.Clear();
        categorySelect.Clear();
        statusSelect.Clear();
        raisedBySelect.Clear();
        Summary = string.Empty;

        return dataGrid.ReloadServerData();
    }
}