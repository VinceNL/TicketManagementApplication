@page "/"
@using Infrastructure.Common
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@rendermode InteractiveServer

@inject ITicketService TicketService;

<PageTitle>Home</PageTitle>
<SectionContent SectionName="page-title">Dashboard</SectionContent>

<style>
    .dashboard-status {
    border: 1px solid #eaeaea;
    text-decoration: none;
    color: var(--black);
    border-radius: 5px;
    }

    .dashboard-status .header {
    padding: 12px;
    border-bottom: 1px solid #eaeaea;
    }

    .dashboard-status .body {
    padding: 12px;
    }

    .summary {
    border: 1px solid #eaeaea;
    padding: 20px;
    text-decoration: none;
    color: var(--black);
    border-radius: 5px;
    cursor: pointer;
    }

    .summary .counter {
    font-size: 1.5rem;
    font-weight: 400;
    }

    .summary:hover {
    color: var(--dark-green);
    border: 1px solid var(--dark-green);
    transition: border-color 0.5s ease;
    transition: color 0.5s ease;
    }
</style>

<div class="container mt-3">
    <div class="row">
        <div class="col">
            <a href="/ticket?filterStatus=New">
                <div class="summary">
                    <div class="title">New</div>
                    <div class="counter">@NewCount</div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="/ticket?filterStatus=Open">
                <div class="summary">
                    <div class="title">Open</div>
                    <div class="counter">@OpenCount</div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="/ticket?filterStatus=Closed">
                <div class="summary">
                    <div class="title">Closed</div>
                    <div class="counter">@ClosedCount</div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="/ticket">
                <div class="summary">
                    <div class="title">Total</div>
                    <div class="counter">@TotalCount</div>
                </div>
            </a>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-9">
            <div class="dashboard-status">
                <div class="header">
                    <div class="title">Last 12 Months Tickets</div>
                </div>
                <div class="body">
                    <MudChart ChartType="ChartType.Line"
                    ChartSeries="@lastYearsSeries"
                    ChartOptions="@lastYearsOptions"
                    XAxisLabels="@lastYearsLabels"
                    Width="100%">
                    </MudChart>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="dashboard-status">
                <div class="header">
                    <div class="title">
                        <Select @ref="categoryTypeDDL" Clearable="false" elements="categoryType" OnSelectChangedParent="HandleCategoryChartChange"></Select>
                    </div>
                    <div style="clear: both;"></div>
                </div>
                <div class="body">
                    <MudChart ChartType="ChartType.Pie"
                    InputData="@chartByCategoryValue"
                    InputLabels="@chartByCategoryLabel">
                    </MudChart>
                </div>
            </div>


        </div>
    </div>
</div>

@code {
    private List<ChartResponse> lastYearsTickets = new();
    private List<ChartSeries> lastYearsSeries = new();
    private ChartOptions lastYearsOptions = new();
    private string[] lastYearsLabels = { };

    private List<ChartResponse> chartByCategory = new();
    Select categoryTypeDDL = new();
    private List<SelectItem> categoryType = new();
    double[] chartByCategoryValue = { };
    string[] chartByCategoryLabel = { };

    private List<ChartResponse> summary = new();
    private bool summaryIntialised = false;
    private int NewCount;
    private int OpenCount;
    private int ClosedCount;
    private int TotalCount;

    protected override void OnInitialized()
    {
        InitializeLastYearsTickets();
        InitializeCategoryType();
        InitializeChartByCategory();
        InitializeSummary();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SetDefaultCategoryType();
            InitializeSummaryCounts();
            StateHasChanged();
        }
    }

    private void InitializeLastYearsTickets()
    {
        lastYearsTickets = TicketService.GetLastYearsTickets();

        lastYearsSeries.Add(new ChartSeries
            {
                Name = "Tickets",
                Data = lastYearsTickets.Select(x => (double)x.Value).ToArray()
            });

        lastYearsOptions.YAxisTicks = 5;
        lastYearsLabels = lastYearsTickets.Select(x => x.Label).ToArray();
    }

    private void InitializeCategoryType()
    {
        categoryType = new List<SelectItem>
        {
            new SelectItem { Value = "Category", Text = "Category" },
            new SelectItem { Value = "Product", Text = "Product" },
            new SelectItem { Value = "Priority", Text = "Priority" }
        };
    }

    private void InitializeChartByCategory()
    {
        chartByCategory = TicketService.ChartByCategory("Category");
        chartByCategoryValue = chartByCategory.Select(x => (double)x.Value).ToArray();
        chartByCategoryLabel = chartByCategory.Select(x => x.Label).ToArray();
    }

    private void InitializeSummary()
    {
        summary = TicketService.GetSummary();
    }

    private void SetDefaultCategoryType()
    {
        if (categoryTypeDDL.selectedValue == null)
        {
            categoryTypeDDL.selectedValue = "Category";
        }
    }

    private void InitializeSummaryCounts()
    {
        if (!summaryIntialised)
        {
            NewCount = summary.FirstOrDefault(x => x.Label.ToUpper() == Constants.STATUS_NEW)?.Value ?? 0;
            OpenCount = summary.FirstOrDefault(x => x.Label.ToUpper() == Constants.STATUS_OPEN)?.Value ?? 0;
            ClosedCount = summary.FirstOrDefault(x => x.Label.ToUpper() == Constants.STATUS_CLOSED)?.Value ?? 0;
            TotalCount = summary.Sum(x => x.Value);
            summaryIntialised = true;
        }
    }

    private void HandleCategoryChartChange(string value)
    {
        chartByCategory = TicketService.ChartByCategory(value);
        chartByCategoryValue = chartByCategory.Select(x => (double)x.Value).ToArray();
        chartByCategoryLabel = chartByCategory.Select(x => x.Label).ToArray();
    }
}
